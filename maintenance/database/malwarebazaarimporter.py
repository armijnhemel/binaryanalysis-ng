#!/usr/bin/env python3

# Binary Analysis Next Generation (BANG!)
#
# Copyright 2021-2022 - Armijn Hemel
# Licensed under the terms of the GNU Affero General Public License version 3
# SPDX-License-Identifier: AGPL-3.0-only

'''
This script processes CSV files from Malware Bazaar

https://bazaar.abuse.ch/

Dumps:

https://bazaar.abuse.ch/export/
'''

import csv
import os
import stat
import sys

# import some modules for dependencies, requires psycopg2 2.7+
import psycopg2
import psycopg2.extras

import click
import tlsh

# import YAML module for the configuration
from yaml import load
from yaml import YAMLError
try:
    from yaml import CLoader as Loader
except ImportError:
    from yaml import Loader


@click.command(short_help='load MalwareBazaar CSV data into database')
@click.option('--config-file', '-c', required=True, help='configuration file', type=click.File('r'))
@click.option('--file', '-f', 'malwarefile', required=True, help='CSV dump file from Malware Bazaar', type=click.File('r'))
def main(config_file, malwarefile):

    # read the configuration file. This is in YAML format
    try:
        config = load(config_file, Loader=Loader)
    except (YAMLError, PermissionError):
        print("Cannot open configuration file, exiting", file=sys.stderr)
        sys.exit(1)

    # some sanity checks:
    if 'database' not in config or 'general' not in config:
        print("Invalid configuration file, exiting", file=sys.stderr)
        sys.exit(1)

    for i in ['postgresql_user', 'postgresql_password', 'postgresql_db']:
        if i not in config['database']:
            print("Configuration file malformed: missing database information %s" % i,
                  file=sys.stderr)
            sys.exit(1)
        postgresql_user = config['database']['postgresql_user']
        postgresql_password = config['database']['postgresql_password']
        postgresql_db = config['database']['postgresql_db']

    # default values
    postgresql_host = None
    postgresql_port = None

    if 'postgresql_host' in config['database']:
        postgresql_host = config['database']['postgresql_host']
    if 'postgresql_port' in config['database']:
        postgresql_port = config['database']['postgresql_port']

    # test the database connection
    try:
        cursor = psycopg2.connect(database=postgresql_db, user=postgresql_user,
                                  password=postgresql_password,
                                  port=postgresql_port, host=postgresql_host)
        cursor.close()
    except psycopg2.Error:
        print("Database server not running or malconfigured, exiting.",
              file=sys.stderr)
        sys.exit(1)

    verbose = False
    if 'verbose' in config['general']:
        if isinstance(config['general']['verbose'], bool):
            verbose = config['general']['verbose']

    # open a connection to the database
    dbconnection = psycopg2.connect(database=postgresql_db,
                                    user=postgresql_user,
                                    password=postgresql_password,
                                    port=postgresql_port,
                                    host=postgresql_host)
    dbcursor = dbconnection.cursor()

    fieldnames = ["first_seen_utc", "sha256_hash", "md5_hash", "sha1_hash", "reporter",
                  "file_name", "file_type_guess", "mime_type", "signature", "clamav",
                  "vtpercent", "imphash", "ssdeep", "tlsh"]
    csvreader = csv.DictReader(malwarefile, fieldnames=fieldnames, skipinitialspace=True)

    prepared_malware = "PREPARE malware_insert as INSERT INTO malware(sha256, tlsh, imphash, filename, signature, mimetype) values ($1, $2, $3, $4, $5, $6) ON CONFLICT DO NOTHING"
    dbcursor.execute(prepared_malware)
    bulkinserts = []

    # skip first 9 lines as they are comments
    skip_counter = 0
    for i in csvreader:
        if skip_counter < 9:
            skip_counter += 1
            continue
        # skip last line, not interesting
        if i['sha256_hash'] is None:
            continue
        # record: sha256, filename, tlsh, mime_type, signature
        sha256_hash = i['sha256_hash']
        if i['tlsh'] == 'n/a':
            tlsh_hash = ''
        elif i['tlsh'] == 'TNULL':
            tlsh_hash = ''
        else:
            if i['tlsh'] != '':
                # sanity check: load TLSH hash
                try:
                    tlsh_test = tlsh.Tlsh()
                    tlsh_test.fromTlshStr(i['tlsh'])
                    tlsh_hash = tlsh_test.hexdigest()
                except ValueError:
                    tlsh_hash = ''

        file_name = i['file_name']
        mime_type = i['mime_type']

        # imphashes can be n/a
        # have errors or tab characters.
        if i['imphash'] == 'n/a':
            imphash = ''
        else:
            imphash = i['imphash']

        # signatures can be n/a, there are also some that
        # have errors or tab characters.
        if i['signature'] == 'n/a':
            signature = ''
        else:
            signature = i['signature'].replace('\t', '')
        bulkinserts.append((sha256_hash, tlsh_hash, imphash, file_name, signature, mime_type))
    malwarefile.close()

    if bulkinserts != []:
        psycopg2.extras.execute_batch(dbcursor,
                                      "execute malware_insert(%s, %s, %s, %s, %s, %s)",
                                      bulkinserts)

    # cleanup
    dbconnection.commit()

    # close the database connection
    dbcursor.close()
    dbconnection.close()

if __name__ == "__main__":
    main()
