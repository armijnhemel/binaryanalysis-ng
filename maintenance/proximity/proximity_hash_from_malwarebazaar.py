#!/usr/bin/env python3

# Binary Analysis Next Generation (BANG!)
#
# Copyright 2021-2022 - Armijn Hemel
# Licensed under the terms of the GNU Affero General Public License version 3
# SPDX-License-Identifier: AGPL-3.0-only

'''
This script processes CSV files from Malware Bazaar

https://bazaar.abuse.ch/

Dumps:

https://bazaar.abuse.ch/export/
'''

import csv
import json
import os
import pathlib
import stat
import sys
import tempfile

import click
import tlsh

# import YAML module for the configuration
from yaml import load
from yaml import YAMLError
try:
    from yaml import CLoader as Loader
except ImportError:
    from yaml import Loader


@click.command(short_help='extract TLSH hashes from MalwareBazaar CSV data for proximity matching')
@click.option('--config-file', '-c', required=True, help='configuration file', type=click.File('r'))
@click.option('--malwarefile', '-m', 'malwarefile', required=True, help='CSV dump file from Malware Bazaar', type=click.File('r'))
@click.option('--force', '-f', help='run even if a result file exists', is_flag=True)
def main(config_file, malwarefile, force):

    # read the configuration file. This is in YAML format
    try:
        configuration = load(config_file, Loader=Loader)
    except (YAMLError, PermissionError):
        print("Cannot open configuration file, exiting", file=sys.stderr)
        sys.exit(1)

    # some sanity checks:
    for i in ['general', 'proximity']:
        if i not in configuration:
            print("Invalid configuration file, section %s missing, exiting" % i,
                  file=sys.stderr)
            sys.exit(1)

    verbose = False
    if 'verbose' in configuration['general']:
        if isinstance(configuration['general']['verbose'], bool):
            verbose = configuration['general']['verbose']

    if 'proximity_directory' not in configuration['proximity']:
        print("proximity_directory not defined in configuration, exiting",
              file=sys.stderr)
        sys.exit(1)

    proximity_directory = pathlib.Path(configuration['proximity']['proximity_directory'])
    if not proximity_directory.exists():
        print("proximity_directory %s does not exist, exiting" % proximity_directory,
              file=sys.stderr)
        sys.exit(1)

    if not proximity_directory.is_dir():
        print("proximity_directory is not a valid directory, exiting",
              file=sys.stderr)
        sys.exit(1)

    # check if the proximity directory is writable
    try:
        temp_name = tempfile.NamedTemporaryFile(dir=proximity_directory)
        temp_name.close()
    except:
        print("proximity_directory is not writable, exiting",
              file=sys.stderr)
        sys.exit(1)

    proximity_binary_directory = proximity_directory / 'malwarebazaar'

    proximity_binary_directory.mkdir(exist_ok=True)

    fieldnames = ["first_seen_utc", "sha256_hash", "md5_hash", "sha1_hash", "reporter",
                  "file_name", "file_type_guess", "mime_type", "signature", "clamav",
                  "vtpercent", "imphash", "ssdeep", "tlsh"]
    csvreader = csv.DictReader(malwarefile, fieldnames=fieldnames, skipinitialspace=True)

    # skip first 9 lines as they are comments
    skip_counter = 0
    try:
        for i in csvreader:
            if skip_counter < 9:
                skip_counter += 1
                continue
            # skip last line, not interesting
            if i['sha256_hash'] is None:
                continue

            outputfile = proximity_binary_directory / ("%s.json" % i['sha256_hash'])
            if outputfile.exists() and not force:
                continue

            if i['tlsh'] == '':
                continue
            if i['tlsh'] == 'n/a':
                continue
            if i['tlsh'] == 'TNULL':
                continue

            # sanity check: load TLSH hash
            try:
                tlsh_test = tlsh.Tlsh()
                tlsh_test.fromTlshStr(i['tlsh'])
            except ValueError:
                continue

            # record: sha256, filename, tlsh, mime_type, signature
            tlsh_hash = tlsh_test.hexdigest()

            with open(outputfile, 'w') as output:
                json.dump({'sha256': i['sha256_hash'], 'tlsh': tlsh_hash}, output, indent=4)
    except UnicodeDecodeError:
        print("Invalid CSV file (compressed file?)", file=sys.stderr)
    finally:
        malwarefile.close()

if __name__ == "__main__":
    main()
